# -*- coding: utf-8 -*-
"""
Created on Tue Mar  3 15:11:35 2020

@author: tlac980
"""

import os
import csv
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation


class DemoTuning():
    
    def __init__(self,
                 x_drift = np.array([835, 1795, 1991, 2373, 2793, 3079, 3344, 4105, 4651, 5002, 5395, 5932, 5968, 5997, 6097, 6224, 6578, 6768, 6835, 6865, 6938,
                                     7154, 7179, 7548, 7732, 7765, 7824, 8086, 8118, 8372, 8598, 8848, 9685, 10006, 11544, 11900, 12154, 12196, 12443, 12570, 12823,
                                     13220, 13290, 13507, 13640, 13788, 13899, 14788, 14829, 15148, 15398, 15593, 15814, 17380, 17442, 17636, 17670, 18518, 18843, 19222,
                                     19244, 19852, 20623, 21528, 21942, 22046, 23809, 23939, 24152, 24217, 24729, 25020, 25347, 25869, 26217, 27616, 27919, 28271, 28331,
                                     28582, 28616, 29482, 29766, 29789, 32477, 32492, 32942, 32990, 33120, 33902, 34611, 36572, 38512, 40022, 40036, 40214, 40727, 41690,
                                     41938, 42241, 42323, 42547, 42813, 43390, 44141, 44340, 44695, 46040, 46674, 46806, 47382, 48443, 48761, 48912, 49755, 50060, 51150,
                                     53745, 54094, 54156, 54439, 54588, 55338, 55943, 56427, 56509, 56885, 57004, 57315, 57474, 57708, 58325, 58343, 58513, 60118, 61309,
                                     61429, 62308, 62336, 62758, 62884, 63242, 63563, 63677, 64328, 64650, 65231, 65628, 66078, 66173, 66722, 67376, 67670, 68148, 68687,
                                     69059, 69613, 70214, 70407, 70543, 71313, 72635, 72870, 72923, 73166, 74844, 74934, 75405, 75500, 75854, 85647, 85680, 85941, 86538,
                                     86805, 88523, 88587, 88748, 89196, 89756, 90356, 90611, 92036, 94750, 94920, 95646, 96045, 96460, 97539, 98915, 100604, 101198, 103828,
                                     105045, 105764, 105778, 106041, 106362, 107508, 114840, 115754, 115999, 116301, 116441, 117333, 117594, 117650, 117947, 118171, 119254,
                                     119452, 119823, 119905, 120463, 121529, 121954, 124441, 124521, 124843, 126917, 129827, 130082, 130704, 130937, 131630, 132414, 132765,
                                     132984, 133368, 133851, 134198, 134275, 135397, 138303, 141062, 141300, 141984, 142400, 142583, 142931, 143190, 144954, 145050, 145851,
                                     146112, 146954, 147006, 147040, 148358, 148934, 149003, 149288, 149543, 151725, 151870, 151980, 154547, 155253, 157500, 158780, 158828,
                                     159195, 160724, 161076, 161463, 161793, 162338, 162960, 163768, 164884, 166340, 166367, 166655, 166785, 166817, 169097, 169350, 169670,
                                     169734, 169971, 170026, 171681, 172065, 172123, 175447, 175840, 175860, 176559, 176770, 177665, 178310, 178955, 179296, 179875, 179976,
                                     179990, 180375, 181658, 181863, 186187, 187072, 188719, 189720, 191236, 191883, 191969, 195267, 195395, 197864, 199180, 202331, 203317,
                                     204693, 204979, 205548, 207141, 209814, 211192, 211451, 213892, 215560, 216904, 217355, 217672, 218433, 219071, 220047, 220163, 220355,
                                     221409, 222709, 223034, 223950, 224613, 224827, 224901, 224929, 225957, 226068, 227255, 227930, 230444, 231868, 232024, 233078, 234046,
                                     234150, 234219, 236281, 236641, 236664, 237127, 238248, 238839, 239140, 239352, 239506, 240365, 241170, 241589, 241628, 242302, 242368,
                                     242480, 242928, 243982, 244859, 246724, 247235, 247633, 248874, 248947, 249360, 250192, 250649, 251871, 252411, 252896, 252962, 252973,
                                     254516, 254579, 255265, 255745, 255758, 257885, 258526, 260963, 261088, 262119, 263402, 264650, 264671, 265099, 265573, 266515, 266868,
                                     267585, 267841, 269113, 269723, 269768, 269780, 269854, 270304, 270328, 270557, 270877, 271907, 272720, 273209, 273926, 274150, 274185,
                                     274907, 274989, 275214, 276273, 277355, 277393, 277995, 278140, 278654, 279873, 280321, 280934, 280986, 282007, 282761, 283445, 284844,
                                     285068, 285442, 286180, 286870, 287111, 288626, 289318, 289355, 290290, 290574, 290645, 291451, 291470, 292097, 292750, 294008, 294392,
                                     296033, 296609, 296867, 297334, 298103, 298180, 298404, 299722, 300659, 301131, 302888, 303218, 303891, 304023, 305857, 306439, 306951,
                                     307009, 307693, 307957, 308028, 308501, 308647, 309930, 311468, 312158, 312734, 313493, 313584, 314546, 315219, 315303, 315563, 315693,
                                     316908, 319244, 321037, 321485, 322159, 324081, 324560, 324799, 326424, 326842, 327389, 328438, 329431, 330233, 330426, 332567, 332590,
                                     333164, 333800, 334036, 334529, 334769, 335313, 335721, 335810, 336074, 336695, 336815, 337142, 337712, 339135, 339313, 339405, 339510,
                                     339554, 341187, 343010, 343431, 344813, 347216, 347287, 348112, 350494, 350578, 351150, 351759, 351919, 352195, 352861, 354280, 354304,
                                     355821, 355920, 355977, 356093, 357296, 357800, 358529, 360102, 360404, 362939, 364503, 364759, 365088, 367366, 367402, 367873, 368675,
                                     369606, 369690, 369876, 369900, 370078, 371175, 371186, 371380, 372117, 372618, 374322, 374532, 375506, 376052, 376119, 377401, 377578,
                                     377802, 380068, 380787, 381499, 381542, 382297, 382751, 385438, 386014, 386849, 388146, 388371, 388959, 389537, 389679, 390017, 390191,
                                     390236, 390359, 390479, 391183, 391632, 392579, 392835, 393252, 393304, 393688, 394248, 394723, 395467, 395832, 396826, 399750, 400232,
                                     402052, 402186, 403366, 404844, 404892, 405471, 405536, 405848, 407141, 407585, 408141, 409498, 409798, 410080, 411022, 411492, 411777,
                                     412368, 412596, 412805, 413042, 414726, 415688, 415946, 419017, 419936, 420164, 422315, 424358, 425996, 426445, 427562, 427670, 427976,
                                     428934, 429525, 429873, 430415, 430796, 432294, 432948, 434033, 434408, 434615, 436656, 437837, 438183, 440290, 441051, 441777, 442167,
                                     442807, 442959, 443868, 443916, 444377, 444633, 445781, 445950, 447266, 447701, 448203, 448647, 449385, 452108, 452658, 453343, 455150,
                                     455698, 456470, 461217, 463341, 464593, 465042, 465145, 465321, 465339, 466836, 467889, 468234, 468844, 469294, 469527, 470888, 471264,
                                     472888, 473023, 473153, 473551, 474981, 475334, 475975, 476051, 476893, 477292, 477937, 477958, 478011, 479344, 482282, 482517, 482612,
                                     483253, 486522, 486560, 486838, 486976, 488082, 488168, 490613, 491514, 491625, 491858, 492093, 492421, 493408, 493644, 495732, 495835,
                                     495885, 495921, 497011, 497140, 497274, 497431, 497564, 497665, 497687, 497986, 498191, 499034, 501209, 502623, 502910, 503363, 504263,
                                     506906, 507884, 515438, 516001, 516529, 520125, 520183, 520585, 520853, 521866, 522026, 522095, 522841, 524635, 526701, 526852, 527364,
                                     527615, 528033, 528226, 528247, 528554, 529471, 529537, 529955, 530058, 530107, 530575, 530960, 532098, 532472, 533144, 533609, 533620,
                                     534893, 534925, 534957, 536254, 536869, 537106, 537308, 537540, 537627, 538034, 538503, 538735, 538769, 539225, 539681, 540089, 540102,
                                     540132, 540672, 540770, 540979, 541950, 542730, 543933, 544011, 544122, 546372, 546608, 546624, 547541, 547867, 547991, 548312, 548540,
                                     549124, 549607, 549957, 551414, 552201, 555975, 557452, 557544, 558096, 558431, 558600, 558617, 558736, 558954, 558987, 560305, 560417,
                                     561529, 564084, 564975, 566235, 567045, 567487, 567714, 567790, 568817, 569716, 569750, 570084, 570886, 571790, 572244, 572323, 572401,
                                     572457, 572493, 572725, 573061, 573612, 576916, 578327, 579422, 579581, 580256, 580596, 580665, 580874]),
                    
                 y_trees = [60, 60, 60, 30, 30, 60, 60, 60, 60, 30, 60, 30, 60, 30, 60, 60, 60, 60, 30, 60, 30, 60, 60, 60, 60, 60, 60, 60,
                               60, 60, 60, 60, 30, 60, 60, 60, 60, 60, 60, 60, 60, 30, 60, 60, 60, 60, 60, 60, 60, 30, 60, 30, 60, 60, 60, 30,
                               60, 60, 60, 60, 30, 60, 60, 60, 30, 60, 60, 30, 60, 60, 60, 60, 60, 30, 60, 30, 60, 30, 60, 30, 30, 30, 60, 30,
                               60, 60, 60, 30, 60, 60, 30, 60, 30, 30, 30, 60, 60, 30, 60, 60, 60, 30, 60, 30, 30, 30, 60, 60, 30, 60, 60, 30,
                               60, 60, 30, 60, 60, 60, 60, 30, 60, 60, 60, 60, 60, 30, 60, 30, 60, 60, 60, 30, 30, 60, 60, 30, 30, 60, 30, 60,
                               60, 30, 30, 60, 30, 60, 30, 60, 30, 60, 60, 30, 60, 30, 30, 60, 30, 60, 30, 60, 30, 30, 30, 30, 60, 60, 60, 60,
                               60, 60, 60, 30, 60, 30, 60, 30, 60, 60, 30, 30, 60, 60, 60, 60, 60, 30, 60, 30, 30, 60, 60, 60, 60, 60, 60, 30,
                               60, 60, 60, 60, 60, 60, 30, 30, 60, 60, 30, 60, 60, 60, 30, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
                               30, 60, 30, 60, 30, 60, 60, 60, 60, 60, 60, 60, 30, 60, 30, 60, 30, 30, 60, 60, 60, 60, 30, 30, 60, 60, 60, 60,
                               60, 30, 60, 30, 60, 60, 60, 60, 60, 30, 60, 60, 30, 60, 60, 60, 60, 60, 30, 60, 60, 60, 60, 30, 60, 60, 60, 30,
                               60, 60, 60, 30, 60, 60, 30, 30, 60, 60, 30, 60, 60, 60, 60, 30, 60, 60, 60, 60, 60, 30, 60, 60, 60, 60, 30, 60,
                               30, 60, 60, 30, 60, 30, 60, 60, 60, 30, 30, 60, 30, 60, 60, 60, 30, 60, 60, 60, 30, 30, 30, 60, 30, 60, 60, 30,
                               60, 30, 60, 30, 30, 60, 60, 60, 30, 60, 60, 30, 60, 30, 30, 60, 60, 60, 60, 30, 60, 60, 60, 30, 60, 60, 60, 60,
                               30, 60, 60, 30, 60, 30, 60, 30, 60, 30, 60, 60, 60, 60, 60, 30, 30, 30, 60, 60, 30, 60, 60, 60, 30, 60, 30, 60,
                               30, 60, 30, 60, 30, 60, 30, 60, 60, 60, 30, 60, 30, 30, 60, 30, 60, 60, 30, 60, 30, 60, 60, 30, 60, 30, 60, 30,
                               30, 60, 30, 60, 30, 30, 60, 60, 30, 30, 60, 60, 30, 60, 60, 30, 60, 60, 30, 60, 60, 30, 60, 60, 60, 30, 60, 30,
                               60, 60, 30, 60, 30, 60, 60, 60, 30, 60, 30, 60, 60, 30, 60, 60, 60, 30, 60, 60, 30, 30, 60, 60, 30, 60, 30, 60,
                               30, 60, 30, 30, 60, 60, 60, 60, 30, 60, 30, 60, 60, 60, 30, 60, 30, 60, 60, 60, 30, 60, 60, 30, 60, 60, 30, 60,
                               30, 60, 60, 30, 60, 30, 60, 30, 60, 60, 60, 30, 30, 60, 30, 30, 60, 30, 30, 60, 60, 30, 60, 60, 30, 60, 30, 60,
                               30, 60, 60, 30, 60, 60, 60, 60, 30, 60, 30, 60, 30, 30, 30, 30, 30, 60, 30, 60, 60, 30, 30, 30, 30, 60, 30, 60,
                               60, 30, 60, 30, 60, 30, 60, 30, 60, 60, 60, 30, 60, 30, 60, 60, 30, 60, 30, 60, 30, 30, 30, 30, 60, 30, 30, 60,
                               30, 60, 30, 60, 30, 30, 60, 60, 30, 60, 30, 30, 30, 60, 60, 30, 60, 30, 60, 60, 30, 30, 60, 60, 30, 30, 60, 30,
                               60, 30, 60, 60, 60, 30, 60, 60, 30, 60, 30, 60, 60, 60, 60, 60, 60, 30, 60, 30, 60, 60, 30, 60, 30, 60, 60, 30,
                               60, 60, 60, 60, 30, 60, 30, 60, 30, 60, 60, 30, 60, 60, 30, 60, 60, 60, 30, 60, 60, 30, 60, 30, 30, 30, 60, 30,
                               60, 30, 60, 60, 30, 30, 60, 30, 60, 30, 60, 60, 60, 60, 30, 30, 60, 30, 60, 60, 30, 30, 30, 60, 30, 30, 60, 30,
                               60, 30, 60, 60, 60, 30, 60, 60, 30, 60, 30, 60, 30, 60, 30, 60, 30, 30, 60, 30, 30, 30, 60, 60, 60, 60, 30, 60,
                               60, 60, 60, 30, 60, 60, 30, 60, 60, 30, 60, 30, 30, 60, 60, 30, 60, 60, 60, 30, 30, 60, 60, 30, 60, 30, 60, 30,
                               60, 30, 60, 60, 30, 60, 60, 30, 60, 30, 60, 60, 30, 60, 60, 60, 60, 30, 60, 30, 60, 60, 60, 60, 60, 30, 60, 30,
                               60, 60, 30, 30, 30, 30, 60, 60, 30, 60, 60, 30, 60, 30, 30, 30, 30, 30, 60, 30, 30, 60, 30, 30, 30, 30, 30, 30,
                               30, 30, 30, 30, 30, 30, 30, 30, 60, 30, 60, 30, 60, 30, 60, 60, 30, 60, 60, 30, 60, 30, 60, 30, 30, 30, 30, 30,
                               30, 60, 30, 60, 60, 60, 60, 60, 60, 60, 30, 30]):
        
        self.x_drift = x_drift
        self.y_trees = y_trees
        
        
        cwd = os.getcwd()
        self.name_file = cwd+'/csv/Covertype_AdativeSetting_Trees_Adapt_Drift_ARDClassic_Run0.csv'

    def animate_tuning(self) :
        with open(self.name_file) as csvDataFile:
            data = [row for row in csv.reader(csvDataFile)]
            
        x = np.array([float(row[0]) for row in data[7:586]], dtype = np.int32)
        y = np.array([float(row[4]) for row in data[7:586]])
        
        
        fig = plt.figure()
        ax1 = plt.subplot(2, 1, 1)
        ax2 = plt.subplot(2, 1, 2)
        ax1.set_xlim(0, 580999)
        ax1.set_ylim(0, 1.1)
        ax1.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])
        ax1.set_ylabel('Kappa')
        graph1, = ax1.plot([], [], '-', markevery = [])
        
        ax2.set_xlim(0, 580999)
        ax2.set_ylim(20, 80)
        ax2.set_ylabel('N_trees')
        ax2.set_xlabel('N_instances')
        graph2, = ax2.step([], [], '-', marker='x', markerfacecolor='red', markeredgecolor = 'red', markevery = [])
        
        mark = []
        def animate(i):
            
            ind_x = list(x).index(min(list(x), key=lambda x:abs(x-self.x_drift[i])))
            if self.x_drift[0] < x[ind_x] :
                graph1.set_data(x[:ind_x], y[:ind_x])
            graph2.set_data(self.x_drift[:i+1], self.y_trees[:i+1])
            mark.append(i)
            graph2.set_markevery(list(mark))
        
            return graph1, graph2
        
        return FuncAnimation(fig, animate, frames=852, interval=100, repeat = False)
#        plt.show()